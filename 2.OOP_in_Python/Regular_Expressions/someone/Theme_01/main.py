# Тема 1. Регулярные выражения

# ======================================================================================================================
# 1. Получите текст из файла.
# Примечание: Можете взять свой текст или воспользоваться готовым из материалов к уроку.
# Вспомните операции с чтением файлов и не забудьте сохранить текст в переменную по аналогии с видеоуроками.

import re

try:
    with open('text.txt', 'r') as f:
        text = f.read()
except FileNotFoundError:
    print('Файл text.txt не найден в рабочей папке')
else:
    print('-' * 45, 'Задание 1', '-' * 45)
    print(text)
    print()

# ======================================================================================================================
# 2. Разбейте полученные текст на предложения.
# Примечание: Напоминаем, что в русском языке предложения заканчиваются на . ! или ?.

text_1 = re.split('[.!?]\s', text)
print('-' * 45, 'Задание 2', '-' * 45)
print(text_1)
print()

# ======================================================================================================================
# 3. Найдите слова, состоящие из 4 букв и более. Выведите на экран 10 самых часто используемых слов.
# Пример вывода: [(“привет”, 3), (“люди”, 3), (“город”, 2)].

most_often_four_plus_letters = {}
text_2 = re.findall('\w{4,}', text)
for elem in text_2:
    most_often_four_plus_letters[elem] = most_often_four_plus_letters.get(elem, 0) + 1
print('-' * 45, 'Задание 3', '-' * 45)
print(sorted(most_often_four_plus_letters.items(), key=lambda elem: (elem[1], elem[0]), reverse=True)[:10])
print()

# ======================================================================================================================
# 4. Отберите все ссылки.
# Примечание: Для поиска воспользуйтесь методом compile, в который вы вставите свой шаблон для поиска ссылок в тексте.

pattern = re.compile('(\d?[a-z]+.[^\s]+)\.\s')
print('-' * 45, 'Задание 4', '-' * 45)
text_3 = pattern.findall(text)
print(text_3)
print()

# ======================================================================================================================
# 5. Ссылки на страницы какого домена встречаются чаще всего?
# Напоминаем, что доменное имя — часть ссылки до первого символа «слеш». Например в ссылке вида
# travel.mail.ru/travel?id=5 доменным именем является travel.mail.ru.
# Подсчет частоты сделайте по аналогии с заданием 3, но верните только одну самую частую ссылку.

# тут не мог придумать шаблон, пришлось костылить
# добавляем к ссылкам из предыдущего задания "/" - чтобы все были со "/" и преобразуем к списку
# затем перебираем элементы списка и для каждого находим позицию первого вхождения "/"
# все что до этой позиции добавляем в словарь и считаем количество повторений
text_4 = '/ '.join(text_3)
text_4 = text_4.split()
most_often_domain = {}
for elem in text_4:
    slice = re.search('/', elem).span()[0]
    most_often_domain[elem[:slice]] = most_often_domain.get(elem[:slice], 0) + 1
print('-' * 45, 'Задание 5', '-' * 45)
print(sorted(most_often_domain.items(), key=lambda elem: (elem[1], elem[0]), reverse=True)[:1])
print()

# ======================================================================================================================
# 6. Замените все ссылки на текст «Ссылка отобразится после регистрации».

for elem in reversed(text_3):
    text = re.sub(elem, 'Ссылка отобразится после регистрации', text)
print('-' * 45, 'Задание 6', '-' * 45)
print(text)
print()
