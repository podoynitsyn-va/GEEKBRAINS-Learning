# Тема 5. Основы ООП

# ======================================================================================================================
# 1. Создайте класс Word. (Вспомните, какое зарезервированное слово используется для создания класса).
# 2. Добавьте свойства text (класс будет хранить слово) и part (часть речи, которой является слово.
# Например, существительное, прилагательное и т.п.). Для добавления свойств воспользуйтесь методом __init__.
# 3. Создайте экземпляр класса Word, передав в качестве параметров любое слово и указав его часть речи.
# 4. Создайте класс Sentence. (по аналогии с п. 1).
# 5. Добавьте свойство content. (по аналогии с п. 2).
# Пояснение к дальнейшему коду: content будет хранить список целых чисел, например [0, 1].
# Эти номера необходимы для выбора слов из заранее созданного массива, чтобы сформировать предложение.
# Пример массива:
# words = [["собака", "сущ"],
#          ["ела", "глагол"],
#          ["колбасу", "сущ"],
#          ["вечером", "наречие"]]
# Если content == [0, 2], получим предложение вида «Собака колбасу».
# 6. Создайте из массива (можете взять приведённый выше или придумать свой) список, каждый элемент которого
# является экземпляром класса Word. Примечание: список list (назовём его words) — отдельная переменная,
# не относящаяся к классам Word и Sentence.
# 7. Добавьте в класс Sentence метод show, составляющий предложение. Метод должен перебирать числа
# из свойства content и подставлять соответствующие слова, которые хранятся в свойстве text экземпляров класса Word.
# Данные извлекаем из списка words, который получили на прошлом шаге. При соединении слов в предложение
# не забудьте добавить пробел между словами.
# 8. Добавьте в класс Sentence метод show_parts, отображающий, какие части речи входят в предложение.
# По аналогии с п. 7 перебирайте в цикле числа из свойства content и сохраняйте результат в отдельный список.
# Учтите, что части речи могут повторяться, но список не должен содержать дубликаты.

from random import randint


class Word:
    text = ''
    part = ''

    def __init__(self, text, part):
        self.text = text
        self.part = part


word = Word('слово', 'сущ')
words = [["собака", "сущ"],
         ["ела", "глагол"],
         ["колбасу", "сущ"],
         ["вечером", "наречие"]]
print('\n', words, '\n')
words_list = [Word(word[0], word[1]) for word in words]


class Sentence:
    content = []

    def show(self, content):
        result = ''
        for n in content:
            result += f'{words_list[n].text} '
        return result.rstrip()

    def show_parts(self, content):
        result = []
        for n in content:
            elem = words_list[n].part
            if elem not in result:
                result.append(elem)
        return result
        # либо без проверки вхождения но в произвольном порядке return list(set(result))


sentence = Sentence()
for i in range(5):
    content = []
    for j in range(randint(1, 10)):
        content.append(randint(0, 3))
    print('-' * 100)
    print(content)
    print(sentence.show(content))
    print(sentence.show_parts(content))
    print()
