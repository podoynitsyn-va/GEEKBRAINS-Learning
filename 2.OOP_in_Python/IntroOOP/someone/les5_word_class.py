# В упражнении мы потренируемся в создании объектно-ориентированной среды и создадим приложение, проводящее
# лингвистический анализ. Следуйте алгоритму и выполняйте действия последовательно, чтобы получить полноценный класс:

# 1. Создайте класс Word. (Вспомните, какое зарезервированное слово используется для создания класса).
# 2. Добавьте свойства text (класс будет хранить слово) и part (часть речи, которой является слово. Например,
# существительное, прилагательное и т.п.). Для добавления свойств воспользуйтесь методом __init__.
# 3. Создайте экземпляр класса Word, передав в качестве параметров любое слово и указав его часть речи.
# 4. Создайте класс Sentence. (по аналогии с п. 1).
# 5. Добавьте свойство content. (по аналогии с п. 2).
# Пояснение к дальнейшему коду: content будет хранить список целых чисел, например [0, 1]. Эти номера необходимы
# для выбора слов из заранее созданного массива, чтобы сформировать предложение.
# Пример массива:
# words = [["собака", "сущ"],
#          ["ела", "глагол"],
#          ["колбасу", "сущ"],
#          ["вечером", "наречие"]]
# Если content == [0, 2], получим предложение вида «Собака колбасу».
# 6. Создайте из массива (можете взять приведённый выше или придумать свой) список, каждый элемент которого является
# экземпляром класса Word. Примечание: список list (назовём его words) — отдельная переменная, не относящаяся к классам
# Word и Sentence.

# 7. Добавьте в класс Sentence метод show, составляющий предложение. Метод должен перебирать числа из свойства content
# и подставлять соответствующие слова, которые хранятся в свойстве text экземпляров класса Word. Данные извлекаем из
# списка words, который получили на прошлом шаге. При соединении слов в предложение не забудьте добавить пробел между
# словами.

# 8. Добавьте в класс Sentence метод show_parts, отображающий, какие части речи входят в предложение. По аналогии
# с п. 7 перебирайте в цикле числа из свойства content и сохраняйте результат в отдельный список. Учтите, что части
# речи могут повторяться, но список не должен содержать дубликаты.

WORDS = [['собака', 'сущ'],
         ['ела', 'глагол'],
         ['колбасу', 'сущ'],
         ['вечером', 'наречие']]  # 5. Создали массив слов для тестов


class Word:  # 1. Создал класс Word
    def __init__(self, text, part):  # 2.
        self.text = text
        self.part = part


class Sentence:  # 4. Создал класс Sentence
    def __init__(self, content):  # 5. Добавлено свойство content
        self.content = content

    def show(self):  # 7. Строит строку слов
        a = []
        for i in self.content:
            a.append(words[i].text)
        return ' '.join(a)

    def show_parts(self):  # 8. Строит список из частей речи
        parts = []
        for i in self.content:
            parts.append(words[i].part)
        return parts


w = Word('собака', 'сущ')  # 3. Создание экземпляра Word только для задания. Далее w не используется

words = [Word(*i) for i in WORDS]  # 6. Создние списка элементов класса Word из переменной word

s = Sentence([0, 2])  # 5. Создаем для теста предложение из слов 'Собака колбасу'

print(f's.show():\t\t{s.show()}')
print(f's.show_parts():\t{s.show_parts()}')
